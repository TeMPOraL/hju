#!/bin/sh
#|-*- mode:lisp -*-|#
#| hue cmdline controller
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(cl-hue
                              apply-argv) :silent t)
  )

(defpackage :ros.script.hju.3690567483
  (:use :cl))
(in-package :ros.script.hju.3690567483)


;;; State.

(defvar *bridge* nil "Hue bridge.")
(defvar *verbose* nil "Do a verbose output.")


;;; Help commands.

(defun print-usage ()
  (format t "~&hju - a simple command line controller for Hue lights
~&Version: 0.1
~&
~&Usage:
~&~8Thju [options...] <command> [args]"))

(defun print-help ()
  (print-usage)
  (format t "~%
~&Options:
~&~8T-h, --help~25,8@TDisplay this text.
~&~8T-v, --verbose~20,8@TMake output verbose.
~&~8T-b BRIDGE, --bridge=BRIDGE~10,8@TUse different bridge URL than the default.
~&~8T-u USER, --user=USER~15,8@TUse different user ID than the default.
~&~8T-t TRANSITION, --transition=TRANSITION~10,8@TUse specified transition time.
~&
~&~4TTRANSITION is given in seconds, can be fractional. Default value: 0.4.
~&
~&Defaults are taken from the config file .hju in your home directory.
~&The format of that file is:
~&~4T(:bridge \"bridge URL\" :user \"USER ID\")
~&
~&Commands:
~&~8Tstatus~20,8@TDisplay status of Hue bridge.
~&~8Tlist~25,8@TList available lights.
~&~8Ton LIGHT~20,8@TTurn on LIGHT.
~&~8Toff LIGHT~20,8@TTurn off LIGHT.
~&~8Ttoggle LIGHT~15,8@TToggle LIGHT.
~&~8Treset LIGHT~15,8@TReset LIGHT to the values I (the author) like.
~&~8Tblink LIGHT~15,8@TBlink LIGHT.
~&~8Tset LIGHT rgb R G B~10,8@TSet color of LIGHT to rgb(R, G, B) (each component in [0...255]).
~&~8Tset LIGHT rgb #RRGGBB~10,8@TSet color of LIGHT to #RRGGBB (hex).
~&~8Tset LIGHT hsv H S V~10,8@TSet color of LIGHT to hsv(H, S, V) (each component in [0...255]).
~&~8Tset LIGHT bri BRI~10,8@TSet brightness of LIGHT to BRI [0...255].
~&~8Tset LIGHT ct CT~10,8@TSet color temperature of LIGHT to CT in Mired.
~&~8Tset LIGHT ctk CTK~10,8@TSet color temperature of LIGHT to CTK in Kelvins.
~&~8Tset LIGHT xy X Y~10,8@TSet color of LIGHT to coordinates (X, Y) in CIE color space.
~&~8Tdiag~25,8@TLike status and list, but dumps a lot more of data.
~&
~&~4TLIGHT can be given as a number or as a prefix of its name.
"))


;;; Hue lights utils


;;; Actual commands
(defun bridge-status ()                        ;TODO
  (format t "STATUS: TODO."))

(defun list-lights ()                          ;TODO
  (let ((lights (cl-hue:get-lights *bridge*)))
    (print lights)))

(defun light-on (light)                    ;TODO
  (declare (ignorable light))
  (when *verbose* (format t "Turning light ... on...")))

(defun light-off (light)                ;TODO
  (declare (ignorable light))
  (when *verbose* (format t "Turning light ... off...")))

(defun light-toggle (light)             ;TODO
  (declare (ignorable light))
  (when *verbose* (format t "Toggling light ......")))

(defun light-reset (light)              ;TODO
  (declare (ignorable light))
  (when *verbose* (format t "Resetting light .....")))

(defun light-blink (light)              ;TODO
  (declare (ignorable light))
  (when *verbose* (format t "Blinking light ......")))

(defun light-set-rgb (light r g b)            ;TODO
  (declare (ignorable light r g b))
  )

(defun light-set-rgb-hex (light hex-rgb)      ;TODO
  (declare (ignorable light hex-rgb))
  )

(defun light-set-hsv (light hsv)              ;TODO
  (declare (ignorable light hsv))
  )

(defun light-set-bri (light bri)        ;TODO
  (declare (ignorable light bri))
  )

(defun light-set-ct (light ct)          ;TODO
  (declare (ignorable light ct))
  )

(defun light-set-ctk (light ctk)        ;TODO
  (declare (ignorable light ctk))
  )

(defun light-set-xy (light x y)         ;TODO
  (declare (ignorable light x y))
  )

(defun diag ()                          ;TODO
  )


;;; Command selection utils.


;;; Entry point-related and command processing.

(defun init-hue-access (switches)
  ;; TODO also load from file
  (let ((bridge (or (getf switches :b)
                    (getf switches :bridge)))
        (user (or (getf switches :u)
                  (getf switches :user))))
    (when (and bridge user)
      (setf *bridge* (cl-hue:make-bridge bridge user)))))

(defun run-command (command switches)
  (declare (ignore switches))
  (let ((verb (first command))
        (args (rest command)))
    (declare (ignore args))
    (cond
      ((string-equal verb "status")
       (bridge-status))
      ((string-equal verb "list")
       (list-lights))
      ((string-equal verb "on")
       (light-on nil))                  ;FIXME
      ((string-equal verb "off")
       (light-off nil))                 ;FIXME
      ((string-equal verb "toggle")
       (light-toggle nil))              ;FIXME
      ((string-equal verb "reset")
       (light-reset nil))               ;FIXME
      ((string-equal verb "set")
       (format t "FIXME TODO"))         ;FIXME TODO
      ((string-equal verb "diag")
       (diag)))))

(defun execute (args)
  (let ((command (car (remove-if (lambda (p) (not (consp p))) args)))
        (switches (remove-if (lambda (p) (consp p)) args)))
    (format t "~S~%~S~%~S~%" args command switches) ;NOTE debug
    (let ((show-usage (null args))
          (show-help (or (getf switches :h) (getf switches :help)))
          (run-verbose (or (getf switches :v) (getf switches :verbose))))

      (when show-usage
        (print-usage)
        (return-from execute 1))

      (when show-help
        (print-help)
        (return-from execute 0))

      (when run-verbose
        (setf *verbose* t))

      (if (init-hue-access switches)
          (run-command command switches)
          (progn (format t "~%ERROR: Bridge or user not specified.~%")
                 (return-from execute -1))))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (execute (apply-argv:parse-argv argv)))

;;; vim: set ft=lisp lisp:
